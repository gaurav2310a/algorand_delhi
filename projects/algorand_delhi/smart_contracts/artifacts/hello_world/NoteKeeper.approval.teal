#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "note" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:5
    // note = GlobalState<string>({ key: "note", initialValue: "" });
    bytec_0 // "note"
    pushbytes ""
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class NoteKeeper extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0xb13c1095 0x7c4d5e21 // method "addNote(string,string)string", method "getNote()string"
    txna ApplicationArgs 0
    match main_addNote_route@5 main_getNote_route@6

main_after_if_else@13:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class NoteKeeper extends Contract {
    intc_1 // 0
    return

main_getNote_route@6:
    // smart_contracts/hello_world/contract.algo.ts:12
    // getNote(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getNote
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_addNote_route@5:
    // smart_contracts/hello_world/contract.algo.ts:7
    // addNote(title: string, content: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class NoteKeeper extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/hello_world/contract.algo.ts:7
    // addNote(title: string, content: string): string {
    callsub addNote
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@9:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class NoteKeeper extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::NoteKeeper.addNote(title: bytes, content: bytes) -> bytes:
addNote:
    // smart_contracts/hello_world/contract.algo.ts:7
    // addNote(title: string, content: string): string {
    proto 2 1
    // smart_contracts/hello_world/contract.algo.ts:8
    // this.note.value = title + " - " + content;
    frame_dig -2
    pushbytes " - "
    concat
    frame_dig -1
    concat
    // smart_contracts/hello_world/contract.algo.ts:5
    // note = GlobalState<string>({ key: "note", initialValue: "" });
    bytec_0 // "note"
    // smart_contracts/hello_world/contract.algo.ts:8
    // this.note.value = title + " - " + content;
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:9
    // return "Note saved: " + title;
    pushbytes "Note saved: "
    frame_dig -2
    concat
    retsub


// smart_contracts/hello_world/contract.algo.ts::NoteKeeper.getNote() -> bytes:
getNote:
    // smart_contracts/hello_world/contract.algo.ts:5
    // note = GlobalState<string>({ key: "note", initialValue: "" });
    intc_1 // 0
    bytec_0 // "note"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:13
    // return this.note.value;
    retsub
