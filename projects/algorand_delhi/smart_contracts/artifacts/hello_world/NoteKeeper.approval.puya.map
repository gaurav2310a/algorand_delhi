{
  "version": 3,
  "sources": [
    "C:/Users/gaura/algorand_delhi/projects/algorand_delhi/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAIoC;AAAsB;;AAAxD;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AASE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAJF;;;AAAA;;;AAAA;;;AAAA;;;AAIE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAIE;;;AACoB;;AAAQ;;;;;AAAR;AAAA;;AAAA;AAHc;AAGhC;AAAA;AACO;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AAJgC;AAAA;AAAA;AAAA;AAQhC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"note\" 0x151f7c75"
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "19": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "22": {
      "op": "bytec_0 // \"note\"",
      "defined_out": [
        "\"note\""
      ],
      "stack_out": [
        "\"note\""
      ]
    },
    "23": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"note\""
      ],
      "stack_out": [
        "\"note\"",
        "\"\""
      ]
    },
    "25": {
      "op": "app_global_put",
      "stack_out": []
    },
    "26": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "31": {
      "op": "pushbytess 0xb13c1095 0x7c4d5e21 // method \"addNote(string,string)string\", method \"getNote()string\"",
      "defined_out": [
        "Method(addNote(string,string)string)",
        "Method(getNote()string)"
      ],
      "stack_out": [
        "Method(addNote(string,string)string)",
        "Method(getNote()string)"
      ]
    },
    "43": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addNote(string,string)string)",
        "Method(getNote()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(addNote(string,string)string)",
        "Method(getNote()string)",
        "tmp%2#0"
      ]
    },
    "46": {
      "op": "match main_addNote_route@5 main_getNote_route@6",
      "stack_out": []
    },
    "52": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "return",
      "stack_out": []
    },
    "54": {
      "block": "main_getNote_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "57": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "60": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "61": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::NoteKeeper.getNote",
      "op": "callsub getNote",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "64": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "65": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "66": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "67": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "70": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "71": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "72": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_addNote_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "88": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "91": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "94": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "97": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::NoteKeeper.addNote",
      "op": "callsub addNote",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "100": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "101": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "102": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "103": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "108": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": []
    },
    "112": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "116": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "122": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "123": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::NoteKeeper.addNote",
      "params": {
        "title#0": "bytes",
        "content#0": "bytes"
      },
      "block": "addNote",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "128": {
      "op": "frame_dig -2",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "130": {
      "op": "pushbytes \" - \"",
      "defined_out": [
        "\" - \"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)",
        "\" - \""
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "defined_out": [
        "content#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "content#0 (copy)"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "139": {
      "op": "bytec_0 // \"note\"",
      "defined_out": [
        "\"note\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"note\""
      ]
    },
    "140": {
      "op": "swap",
      "stack_out": [
        "\"note\"",
        "new_state_value%0#0"
      ]
    },
    "141": {
      "op": "app_global_put",
      "stack_out": []
    },
    "142": {
      "op": "pushbytes \"Note saved: \"",
      "defined_out": [
        "\"Note saved: \""
      ],
      "stack_out": [
        "\"Note saved: \""
      ]
    },
    "156": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"Note saved: \"",
        "title#0 (copy)"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "159": {
      "retsub": true,
      "op": "retsub"
    },
    "160": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::NoteKeeper.getNote",
      "params": {},
      "block": "getNote",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "161": {
      "op": "bytec_0 // \"note\"",
      "defined_out": [
        "\"note\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"note\""
      ]
    },
    "162": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "163": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    }
  }
}